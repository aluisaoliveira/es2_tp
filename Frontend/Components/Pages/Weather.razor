@page "/weather"
@using System.Text.Json.Nodes
@using Frontend.Helpers
@attribute [StreamRendering]

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
       // forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
       // {
          //  Date = startDate.AddDays(index),
          //  TemperatureC = Random.Shared.Next(-20, 55),
         //   Summary = summaries[Random.Shared.Next(summaries.Length)]
     //   }).ToArray();
     ApiHelper helper = new ApiHelper(new HttpClient { BaseAddress = new Uri("http://localhost:5295/") });
     //helper.GetFromApiAsync<JsonContent>("weatherforecast");
     JsonArray content = await helper.GetFromApiAsync<JsonArray>("weatherforecast");
     List<WeatherForecast> list = new List<WeatherForecast>();
        foreach (JsonObject i in content) {
            WeatherForecast weatherForecast = new WeatherForecast
            {
                Date =  DateOnly.Parse(i["date"].ToString()), 
                TemperatureC =  Int32.Parse(i["temperatureC"].ToString()),
                Summary = i["summary"].ToString()
            };
            list.Add(weatherForecast);
        }

        forecasts = list.ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

}